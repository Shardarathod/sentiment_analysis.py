# sentiment_analysis.py
# Step 1: Import Libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

# Step 2: Create Sample Dataset
data = {
    'Review': [
        "I love this product!", "Worst purchase ever.",
        "Absolutely fantastic!", "Not worth the money.",
        "Highly recommend it", "Terrible service", 
        "Very satisfied", "I hate it", 
        "Great experience", "Bad quality"
    ],
    'Sentiment': [
        "Positive", "Negative", "Positive", "Negative", "Positive",
        "Negative", "Positive", "Negative", "Positive", "Negative"
    ]
}
df = pd.DataFrame(data)

# Step 3: Preprocessing
df['Review'] = df['Review'].str.lower()

# Step 4: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(
    df['Review'], df['Sentiment'], test_size=0.3, random_state=42
)

# Step 5: TF-IDF Vectorization
tfidf = TfidfVectorizer(stop_words='english')
X_train_tfidf = tfidf.fit_transform(X_train)
X_test_tfidf = tfidf.transform(X_test)

# Step 6: Logistic Regression Model
model = LogisticRegression()
model.fit(X_train_tfidf, y_train)

# Step 7: Prediction and Evaluation
y_pred = model.predict(X_test_tfidf)

# Output results
print("Predicted Sentiments:", y_pred)
print("\nAccuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))





